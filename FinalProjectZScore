package ZScoreCalculator;
import javax.swing.JFrame;
import java.util.Scanner;
import java.awt.Rectangle;
public class ZScoreCalculator {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JFrame window = new JFrame();
		window.setSize(640,480);
		window.setTitle("Curve");
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setVisible(true);
		// Rectangle rect = new Rectangle(5,10, 300, 100);
Scanner scan= new Scanner(System.in);
double PopMean;
double Parameter;
double StandardDev;
double Z;

double[][] Standard= { {100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100},
		 {-39, .00005, .00005, .00004, .00004, .00004, .00004, .00004, .00004, .00003, .00003},
		 { -38, .00007, .00007 ,.00007, .00006, .00006, .00006, .00006, .00005, .00005, .00005},
		 { -37 ,.00011, .00010, .00010, .00010, .00009, .00009, .00008, .00008, .00008, .00008},
		 {-36, .00016, .00015 ,.00015, .00014, .00014, .00013, .00013, .00012 ,.00012 ,.00011},
		 {-35 ,.00023 ,.00022 ,.00022 ,.00021 ,.00020 ,.00019, .00019, .00018, .00017, .00017},
		 {-34 ,.00034 ,.00032, .00031, .00030, .00029, .00028, .00027, .00026, .00025, .00024},
		 {-33 ,.00048 ,.00047 ,.00045, .00043 ,.00042 ,.00040, .00039, .00038 ,.00036, .00035},
		 {-32, .00069, .00066, .00064, .00062, .00060, .00058, .00056, .00054, .00052, .00050},
		 {-31 ,.00097, .00094, .00090, .00087, .00084 ,.00082 ,.00079, .00076, .00074, .00071},
		 {-30 ,.00135, .00131, .00126, .00122, .00118, .00114, .00111, .00107, .00104, .00100},
		 {-29, .00187, .00181, .00175, .00169, .00164, .00159, .00154, .00149, .00144, .00139},
		 {-28 ,.00256, .00248, .00240, .00233, .00226, .00219, .00212, .00205, .00199, .00193},
		 {-27, .00347, .00336, .00326, .00317, .00307, .00298, .00289, .00280, .00272, .00264},
		 {-26 ,.00466, .00453, .00440, .00427, .00415, .00402, .00391, .00379, .00368, .00357},
		 {-25, .00621, .00604, .00587, .00570, .00554, .00539, .00523, .00508, .00494, .00480},
		 {-24 ,.00820, .00798, .00776, .00755, .00734, .00714, .00695, .00676, .00657, .00639},
		 {-23, .01072, .01044, .01017, .00990, .00964, .00939, .00914, .00889, .00866, .00842},
		 {-22 ,.01390, .01355, .01321, .01287, .01255, .01222, .01191, .01160, .01130, .01101},
		 {-21, .01786, .01743, .01700, .01659, .01618, .01578, .01539, .01500, .01463, .01426},
		 {-20, .02275, .02222, .02169, .02118, .02068, .02018, .01970, .01923, .01876, .01831},
		 {-19, .02872, .02807, .02743, .02680, .02619, .02559, .02500, .02442, .02385, .02330},
		 {-18, .03593, .03515, .03438, .03362, .03288, .03216, .03144, .03074, .03005, .02938},
		 {-17, .04457 ,.04363, .04272, .04182, .04093, .04006, .03920, .03836, .03754, .03673},
		 {-16, .05480, .05370, .05262, .05155, .05050, .04947, .04846, .04746, .04648, .04551},
		 {-15, .06681, .06552, .06426, .06301, .06178, .06057, .05938, .05821, .05705, .05592},
		 {-14, .08076, .07927, .07780, .07636, .07493, .07353, .07215, .07078, .06944, .06811},
		 {-13, .09680, .09510, .09342, .09176, .09012, .08851, .08691, .08534, .08379, .08226},
		 {-12, .11507, .11314, .11123, .10935, .10749, .10565, .10383, .10204, .10027, .09853},
		 {-11, .13567, .13350, .13136, .12924, .12714, .12507, .12302, .12100, .11900, .11702},
		 {-10, .15866, .15625, .15386, .15151, .14917, .14686, .14457, .14231, .14007, .13786},
		 {-9 ,.18406 ,.18141, .17879, .17619, .17361, .17106, .16853, .16602, .16354, .16109},
		 {-8, .21186, .20897, .20611, .20327, .20045, .19766, .19489, .19215, .18943, .18673},
		 {-7 ,.24196, .23885 ,.23576, .23270, .22965, .22663, .22363, .22065, .21770 ,.21476},
		 {-6 ,.27425, .27093 ,.26763, .26435, .26109, .25785, .25463, .25143, .24825 ,.24510},
		 {-5 ,.30854, .30503 ,.30153, .29806, .29460, .29116, .28774, .28434, .28096 ,.27760},
		 {-4 ,.34458, .34090 ,.33724, .33360, .32997, .32636, .32276, .31918, .31561 ,.31207},
		 {-3 ,.38209, .37828 ,.37448, .37070, .36693, .36317, .35942, .35569, .35197 ,.34827},
		 {-2 ,.42074, .41683 ,.41294, .40905, .40517, .40129, .39743, .39358, .38974 ,.38591},
		 {-1 ,.46017, .45620 ,.45224, .44828, .44433, .44038, .43644, .43251, .42858 ,.42465},
		 {-0 ,.50000, .49601 ,.49202, .48803, .48405, .48006, .47608,.47210, .46812 ,.46414 },
		 { 0, .50000, .50399, .50798, .51197, .51595, .51994, .52392, .52790, .53188, .53586},
		 { 1, .53983, .54380, .54776, .55172, .55567, .55962, .56356, .56749,.57142 ,.57535},
		 { 2, .57926, .58317, .58706, .59095, .59483, .59871, .60257, .60642, .61026, .61409},
		 { 3, .61791, .62172, .62552, .62930, .63307, .63683, .64058, .64431,.64803, .65173},
		 { 4, .65542, .65910, .66276, .66640, .67003, .67364, .67724, .68082, .68439, .68793},
		 { 5, .69146, .69497, .69847, .70194, .70540, .70884, .71226, .71566, .71904, .72240},
		 { 6, .72575, .72907, .73237, .73565, .73891, .74215, .74537, .74857, .75175, .75490},
		 { 7, .75804, .76115, .76424, .76730, .77035, .77337, .77637, .77935, .78230, .78524},
		 { 8, .78814, .79103, .79389, .79673, .79955, .80234, .80511, .80785, .81057, .81327},
		 { 9, .81594, .81859, .82121, .82381, .82639, .82894, .83147, .83398, .83646, .83891},
		 {10, .84134, .84375, .84614, .84849, .85083, .85314, .85543, .85769, .85993, .86214},
		 {11, .86433, .86650, .86864, .87076, .87286, .87493, .87698, .87900, .88100, .88298},
		 {12, .88493, .88686, .88877, .89065, .89251, .89435, .89617, .89796, .89973, .90147},
		 {13, .90320, .90490, .90658, .90824, .90988, .91149, .91309, .91466, .91621, .91774},
		 {14, .91924, .92073, .92220, .92364, .92507, .92647, .92785, .92922, .93056, .93189},
		 {15, .93319, .93448, .93574, .93699, .93822, .93943, .94062, .94179, .94295, .94408},
		 {16, .94520, .94630, .94738, .94845, .94950, .95053, .95154, .95254, .95352, .95449},
		 {17, .95543, .95637, .95728, .95818, .95907, .95994, .96080, .96164, .96246, .96327},
		 {18, .96407, .96485, .96562, .96638, .96712, .96784, .96856, .96926, .96995, .97062},
		 {19, .97128, .97193, .97257, .97320, .97381, .97441, .97500, .97558, .97615, .97670},
		 {20, .97725, .97778, .97831, .97882, .97932, .97982, .98030, .98077, .98124, .98169},
		 {21, .98214, .98257, .98300, .98341, .98382, .98422, .98461, .98500, .98537, .98574},
		 {22, .98610, .98645, .98679, .98713, .98745, .98778, .98809, .98840, .98870, .98899},
		 {23, .98928, .98956, .98983, .99010, .99036, .99061, .99086, .99111, .99134, .99158},
		 {24, .99180, .99202, .99224, .99245, .99266, .99286, .99305, .99324, .99343, .99361},
		 {25, .99379, .99396, .99413, .99430, .99446, .99461, .99477, .99492, .99506, .99520},
		 {26, .99534, .99547, .99560, .99573, .99585, .99598, .99609, .99621, .99632, .99643},
		 {27, .99653, .99664, .99674, .99683, .99693, .99702, .99711, .99720, .99728, .99736},
		 {28, .99744, .99752, .99760, .99767, .99774, .99781, .99788, .99795, .99801, .99807},
		 {29, .99813, .99819, .99825, .99831, .99836, .99841, .99846, .99851, .99856, .99861},
		 {30, .99865, .99869, .99874, .99878, .99882, .99886, .99889, .99893, .99896, .99900},
		 {31, .99903, .99906, .99910, .99913, .99916, .99918, .99921, .99924, .99926, .99929},
		 {32, .99931, .99934, .99936, .99938, .99940, .99942, .99944, .99946, .99948, .99950},
		 {33, .99952, .99953, .99955, .99957, .99958, .99960, .99961, .99962, .99964, .99965},
		 {34, .99966, .99968, .99969, .99970, .99971, .99972, .99973, .99974, .99975, .99976},
		 {35, .99977, .99978, .99978, .99979, .99980, .99981, .99981, .99982, .99983, .99983},
		 {36, .99984, .99985, .99985, .99986, .99986, .99987, .99987, .99988, .99988, .99989},
		 {37, .99989, .99990, .99990, .99990, .99991, .99991, .99992, .99992, .99992, .99992},
		 {38, .99993, .99993, .99993, .99994, .99994, .99994, .99994, .99995, .99995, .99995},
		 {39, .99995, .99995, .99996, .99996, .99996, .99996, .99996, .99996, .99997, .99997 }
		 };
System.out.println("Enter the population mean(μ):");
PopMean=scan.nextDouble();
System.out.println("Enter your raw score(X):");
Parameter= scan.nextDouble();
System.out.println("Enter the standard deviation(σ):");
StandardDev=scan.nextDouble();
Z=(Parameter-PopMean)/StandardDev;
Z=Math.round(Z * 100.0) / 100.0;
System.out.println("Your Z-Score is:"+Z);

if (Z<=-4) {
	System.out.println("Your P-Value is approximately 0\n");
}
else if (Z>=4) {
	System.out.println("Your P-Value is approximately 1\n");
}
else {

	double front;
	double end1;



	Z=Z*100;
	
	end1=Math.abs(Z%10);

	front=(Z-end1)/10;
	

/*	//for(int i=0;i<=Standard.length-1;i++) {
		if (Standard[i][0]==front) {
		r=i;
		}
	
	
	for (int z=0;z<=Standard[0].length-1;z++) {
		if(Standard[0][z]==end1) {
		c=z;
		}
	
	*/
	//tester=Standard[r][c];
if(front<0) {
System.out.println("Your p-value is:"+Standard[(int) (front)+40][(int) (end1+1)]);
}
	else {
		System.out.println("Your p-value is:"+Standard[(int)(front)+41][(int)(end1+1)]);
	}
}
}
	}

	
































	
	
	


